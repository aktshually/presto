// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGuild = `-- name: CreateGuild :one
INSERT INTO guilds (id) VALUES ($1) RETURNING id, max_warnings_per_user, on_reach_max_warnings_per_user, seconds_to_delete_messages_for_on_reach_max_warnings_per_user, role_to_give_on_reach_max_warnings_per_user, seconds_warned_user_should_keep_role_for
`

func (q *Queries) CreateGuild(ctx context.Context, id string) (Guild, error) {
	row := q.db.QueryRow(ctx, createGuild, id)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.MaxWarningsPerUser,
		&i.OnReachMaxWarningsPerUser,
		&i.SecondsToDeleteMessagesForOnReachMaxWarningsPerUser,
		&i.RoleToGiveOnReachMaxWarningsPerUser,
		&i.SecondsWarnedUserShouldKeepRoleFor,
	)
	return i, err
}

const createGuildMember = `-- name: CreateGuildMember :one
INSERT INTO guild_members (guild_id, user_id) VALUES ($1, $2) RETURNING warnings
`

type CreateGuildMemberParams struct {
	GuildID string
	UserID  string
}

func (q *Queries) CreateGuildMember(ctx context.Context, arg CreateGuildMemberParams) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, createGuildMember, arg.GuildID, arg.UserID)
	var warnings pgtype.Int4
	err := row.Scan(&warnings)
	return warnings, err
}

const getGuild = `-- name: GetGuild :one
SELECT
    id, max_warnings_per_user, on_reach_max_warnings_per_user, seconds_to_delete_messages_for_on_reach_max_warnings_per_user, role_to_give_on_reach_max_warnings_per_user, seconds_warned_user_should_keep_role_for
FROM
    guilds
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetGuild(ctx context.Context, id string) (Guild, error) {
	row := q.db.QueryRow(ctx, getGuild, id)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.MaxWarningsPerUser,
		&i.OnReachMaxWarningsPerUser,
		&i.SecondsToDeleteMessagesForOnReachMaxWarningsPerUser,
		&i.RoleToGiveOnReachMaxWarningsPerUser,
		&i.SecondsWarnedUserShouldKeepRoleFor,
	)
	return i, err
}

const getWarningsFromGuildMember = `-- name: GetWarningsFromGuildMember :one
SELECT warnings FROM guild_members WHERE guild_id = $1 AND user_id = $2 LIMIT 1
`

type GetWarningsFromGuildMemberParams struct {
	GuildID string
	UserID  string
}

func (q *Queries) GetWarningsFromGuildMember(ctx context.Context, arg GetWarningsFromGuildMemberParams) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, getWarningsFromGuildMember, arg.GuildID, arg.UserID)
	var warnings pgtype.Int4
	err := row.Scan(&warnings)
	return warnings, err
}

const updateGuildMemberWarnings = `-- name: UpdateGuildMemberWarnings :exec
UPDATE guild_members SET warnings = $1 WHERE guild_id = $2 AND user_id = $3
`

type UpdateGuildMemberWarningsParams struct {
	Warnings pgtype.Int4
	GuildID  string
	UserID   string
}

func (q *Queries) UpdateGuildMemberWarnings(ctx context.Context, arg UpdateGuildMemberWarningsParams) error {
	_, err := q.db.Exec(ctx, updateGuildMemberWarnings, arg.Warnings, arg.GuildID, arg.UserID)
	return err
}

const updateMaxWarningsPerUserFromGuild = `-- name: UpdateMaxWarningsPerUserFromGuild :exec
UPDATE guilds SET max_warnings_per_user = $1 WHERE id = $2
`

type UpdateMaxWarningsPerUserFromGuildParams struct {
	MaxWarningsPerUser pgtype.Int4
	ID                 string
}

func (q *Queries) UpdateMaxWarningsPerUserFromGuild(ctx context.Context, arg UpdateMaxWarningsPerUserFromGuildParams) error {
	_, err := q.db.Exec(ctx, updateMaxWarningsPerUserFromGuild, arg.MaxWarningsPerUser, arg.ID)
	return err
}

const updateOnReachMaxWarningsPerUserFromGuild = `-- name: UpdateOnReachMaxWarningsPerUserFromGuild :exec
UPDATE guilds SET on_reach_max_warnings_per_user = $1 WHERE id = $2
`

type UpdateOnReachMaxWarningsPerUserFromGuildParams struct {
	OnReachMaxWarningsPerUser pgtype.Int4
	ID                        string
}

func (q *Queries) UpdateOnReachMaxWarningsPerUserFromGuild(ctx context.Context, arg UpdateOnReachMaxWarningsPerUserFromGuildParams) error {
	_, err := q.db.Exec(ctx, updateOnReachMaxWarningsPerUserFromGuild, arg.OnReachMaxWarningsPerUser, arg.ID)
	return err
}

const updateRoletoGiveOnReachMaxWarningsPerUserFromGuild = `-- name: UpdateRoletoGiveOnReachMaxWarningsPerUserFromGuild :exec
UPDATE guilds SET role_to_give_on_reach_max_warnings_per_user = $1 WHERE id = $2
`

type UpdateRoletoGiveOnReachMaxWarningsPerUserFromGuildParams struct {
	RoleToGiveOnReachMaxWarningsPerUser pgtype.Text
	ID                                  string
}

func (q *Queries) UpdateRoletoGiveOnReachMaxWarningsPerUserFromGuild(ctx context.Context, arg UpdateRoletoGiveOnReachMaxWarningsPerUserFromGuildParams) error {
	_, err := q.db.Exec(ctx, updateRoletoGiveOnReachMaxWarningsPerUserFromGuild, arg.RoleToGiveOnReachMaxWarningsPerUser, arg.ID)
	return err
}

const updateSecondsToDeleteUserMessagesForOnReachMaxWarningsPerUserFromGuild = `-- name: UpdateSecondsToDeleteUserMessagesForOnReachMaxWarningsPerUserFromGuild :exec
UPDATE guilds SET seconds_to_delete_messages_for_on_reach_max_warnings_per_user = $1 WHERE id = $2
`

type UpdateSecondsToDeleteUserMessagesForOnReachMaxWarningsPerUserFromGuildParams struct {
	SecondsToDeleteMessagesForOnReachMaxWarningsPerUser pgtype.Int4
	ID                                                  string
}

func (q *Queries) UpdateSecondsToDeleteUserMessagesForOnReachMaxWarningsPerUserFromGuild(ctx context.Context, arg UpdateSecondsToDeleteUserMessagesForOnReachMaxWarningsPerUserFromGuildParams) error {
	_, err := q.db.Exec(ctx, updateSecondsToDeleteUserMessagesForOnReachMaxWarningsPerUserFromGuild, arg.SecondsToDeleteMessagesForOnReachMaxWarningsPerUser, arg.ID)
	return err
}

const updateSecondsUserShouldKeepRoleForFromGuild = `-- name: UpdateSecondsUserShouldKeepRoleForFromGuild :exec
UPDATE guilds SET seconds_warned_user_should_keep_role_for = $1 WHERE id = $2
`

type UpdateSecondsUserShouldKeepRoleForFromGuildParams struct {
	SecondsWarnedUserShouldKeepRoleFor pgtype.Int4
	ID                                 string
}

func (q *Queries) UpdateSecondsUserShouldKeepRoleForFromGuild(ctx context.Context, arg UpdateSecondsUserShouldKeepRoleForFromGuildParams) error {
	_, err := q.db.Exec(ctx, updateSecondsUserShouldKeepRoleForFromGuild, arg.SecondsWarnedUserShouldKeepRoleFor, arg.ID)
	return err
}
