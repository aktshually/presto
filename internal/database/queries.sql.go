// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGuild = `-- name: CreateGuild :one
INSERT INTO guilds (id) VALUES ($1) RETURNING id, max_warnings_per_user
`

func (q *Queries) CreateGuild(ctx context.Context, id string) (Guild, error) {
	row := q.db.QueryRow(ctx, createGuild, id)
	var i Guild
	err := row.Scan(&i.ID, &i.MaxWarningsPerUser)
	return i, err
}

const createWarnedUser = `-- name: CreateWarnedUser :one
INSERT INTO warned_users (guild_id, user_id) VALUES ($1, $2) RETURNING warnings
`

type CreateWarnedUserParams struct {
	GuildID string
	UserID  string
}

func (q *Queries) CreateWarnedUser(ctx context.Context, arg CreateWarnedUserParams) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, createWarnedUser, arg.GuildID, arg.UserID)
	var warnings pgtype.Int4
	err := row.Scan(&warnings)
	return warnings, err
}

const getGuild = `-- name: GetGuild :one
SELECT
    id, max_warnings_per_user
FROM
    guilds
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetGuild(ctx context.Context, id string) (Guild, error) {
	row := q.db.QueryRow(ctx, getGuild, id)
	var i Guild
	err := row.Scan(&i.ID, &i.MaxWarningsPerUser)
	return i, err
}

const getWarningsFromWarnedUser = `-- name: GetWarningsFromWarnedUser :one
SELECT warnings FROM warned_users WHERE guild_id = $1 AND user_id = $2 LIMIT 1
`

type GetWarningsFromWarnedUserParams struct {
	GuildID string
	UserID  string
}

func (q *Queries) GetWarningsFromWarnedUser(ctx context.Context, arg GetWarningsFromWarnedUserParams) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, getWarningsFromWarnedUser, arg.GuildID, arg.UserID)
	var warnings pgtype.Int4
	err := row.Scan(&warnings)
	return warnings, err
}

const updateWarnedUserWarnings = `-- name: UpdateWarnedUserWarnings :exec
UPDATE warned_users SET warnings = $1 WHERE guild_id = $2 AND user_id = $3
`

type UpdateWarnedUserWarningsParams struct {
	Warnings pgtype.Int4
	GuildID  string
	UserID   string
}

func (q *Queries) UpdateWarnedUserWarnings(ctx context.Context, arg UpdateWarnedUserWarningsParams) error {
	_, err := q.db.Exec(ctx, updateWarnedUserWarnings, arg.Warnings, arg.GuildID, arg.UserID)
	return err
}
