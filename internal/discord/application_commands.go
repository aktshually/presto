package discord

import "slices"

const (
	APPLICATION_COMMAND_TYPE_CHAT_INPUT          ApplicationCommandType = 1
	APPLICATION_COMMAND_TYPE_USER                ApplicationCommandType = 2
	APPLICATION_COMMAND_TYPE_MESSAGE             ApplicationCommandType = 3
	APPLICATION_COMMAND_TYPE_PRIMARY_ENTRY_POINT ApplicationCommandType = 4
)

type (
	ApplicationCommandType       int
	ApplicationCommandOptionType int
)

type ApplicationCommand struct {
	ID          any                        `json:"id,omitempty"`
	Name        string                     `json:"name"`
	Description string                     `json:"description"`
	Options     []ApplicationCommandOption `json:"options,omitempty"`
	Type        ApplicationCommandType     `json:"type"`
}

type ApplicationCommandOption struct {
	Type         ApplicationCommandOptionType `json:"type"`
	Name         string                       `json:"name"`
	Description  string                       `json:"description"`
	Required     bool                         `json:"required"`
	Autocomplete bool                         `json:"autocomplete"`
}

// Compares two application commands without taking the ID into consideration.
// This is because registered commands are structs created with the necessary data
// to create or update an application command and the ID is generated by Discord so
// every comparision using `reflect.DeepEqual` would fail since the command registered locally
// will have `nil` as the ID while the application command fetched from Discord will have some
// snowflake as the ID. `ApplicationCommand.Handler` is also ignored.
func CompareApplicationCommands(a ApplicationCommand, b ApplicationCommand) bool {
	return a.Name == b.Name && a.Description == b.Description && a.Type == b.Type && slices.Equal(a.Options, b.Options)
}

// Creates a slash command. This was made in order to avoid the unnecessary declaration
// of the `ApplicationCommand.Type` as it will always equal to `constants.APPLICATION_COMMAND_TYPE_CHAT_INPUT`
// when the application command is an slash command.
func CreateSlashCommand(name, description string, options []ApplicationCommandOption) ApplicationCommand {
	return ApplicationCommand{
		Type:        APPLICATION_COMMAND_TYPE_CHAT_INPUT,
		Name:        name,
		Description: description,
		Options:     options,
	}
}

// Creates an UI application command for users.
func CreateUserApplicationCommand(name string) ApplicationCommand {
	return ApplicationCommand{
		Type: APPLICATION_COMMAND_TYPE_USER,
		Name: name,
	}
}
