package discord

import "strings"

const (
	APPLICATION_COMMAND_TYPE_CHAT_INPUT          ApplicationCommandType = 1
	APPLICATION_COMMAND_TYPE_USER                ApplicationCommandType = 2
	APPLICATION_COMMAND_TYPE_MESSAGE             ApplicationCommandType = 3
	APPLICATION_COMMAND_TYPE_PRIMARY_ENTRY_POINT ApplicationCommandType = 4
)

const (
	APPLICATION_COMMAND_OPTION_TYPE_SUB_COMMAND       ApplicationCommandOptionType = 1
	APPLICATION_COMMAND_OPTION_TYPE_SUB_COMMAND_GROUP ApplicationCommandOptionType = 2
	APPLICATION_COMMAND_OPTION_TYPE_STRING            ApplicationCommandOptionType = 3
	APPLICATION_COMMAND_OPTION_TYPE_INTEGER           ApplicationCommandOptionType = 4
	APPLICATION_COMMAND_OPTION_TYPE_BOOLEAN           ApplicationCommandOptionType = 5
	APPLICATION_COMMAND_OPTION_TYPE_USER              ApplicationCommandOptionType = 6
	APPLICATION_COMMAND_OPTION_TYPE_CHANNEL           ApplicationCommandOptionType = 7
	APPLICATION_COMMAND_OPTION_TYPE_ROLE              ApplicationCommandOptionType = 8
	APPLICATION_COMMAND_OPTION_TYPE_MENTIONABLE       ApplicationCommandOptionType = 9
	APPLICATION_COMMAND_OPTION_TYPE_NUMBER            ApplicationCommandOptionType = 10
	APPLICATION_COMMAND_OPTION_TYPE_ATTACHMENT        ApplicationCommandOptionType = 11
)

type (
	ApplicationCommandType       int
	ApplicationCommandOptionType int
)

type ApplicationCommand struct {
	ID          any                        `json:"id,omitempty"`
	Name        string                     `json:"name"`
	Description string                     `json:"description"`
	Options     []ApplicationCommandOption `json:"options,omitempty"`
	Type        ApplicationCommandType     `json:"type,omitempty"`
}

type ApplicationCommandOption struct {
	Type         ApplicationCommandOptionType `json:"type"`
	Name         string                       `json:"name"`
	Description  string                       `json:"description"`
	Required     bool                         `json:"required"`
	Autocomplete bool                         `json:"autocomplete"`
	Options      []ApplicationCommandOption   `json:"options,omitempty"`
}

// Joins the name of the application command options if they are sub commands or sub command groups
func JoinApplicationCommandOptionsNames(options []ApplicationCommandOption) string {
	var names []string

	var appendNames func([]ApplicationCommandOption)
	appendNames = func(opts []ApplicationCommandOption) {
		for _, option := range opts {
			if option.Type == APPLICATION_COMMAND_OPTION_TYPE_SUB_COMMAND || option.Type == APPLICATION_COMMAND_OPTION_TYPE_SUB_COMMAND_GROUP {
				names = append(names, option.Name)
				appendNames(option.Options)
			}
		}
	}

	appendNames(options)
	return strings.Join(names, " ")
}

// Gets the "whole name" of an application command, joining its base name, sub command names and sub command group names
func GetApplicationCommandName(applicationCommand ApplicationCommand) string {
	return applicationCommand.Name + " " + JoinApplicationCommandOptionsNames(applicationCommand.Options)
}

// Compares two `[]ApplicationCommandOption` and returns whether they are exaclty equal or not
func AreApplicationCommandOptionsEqual(a []ApplicationCommandOption, b []ApplicationCommandOption) bool {
	if len(a) != len(b) {
		return false
	}

	for i, x := range a {
		y := a[i]

		if x.Type != x.Type || x.Description != y.Description || x.Required != y.Required || x.Autocomplete != y.Autocomplete {
			return false
		}

		if !AreApplicationCommandOptionsEqual(x.Options, y.Options) {
			return false
		}
	}

	return true
}

// Compares two application commands without taking the ID into consideration.
// This is because registered commands are structs created with the necessary data
// to create or update an application command and the ID is generated by Discord so
// every comparision using `reflect.DeepEqual` would fail since the command registered locally
// will have `nil` as the ID while the application command fetched from Discord will have some
// snowflake as the ID.
func CompareApplicationCommands(a ApplicationCommand, b ApplicationCommand) bool {
	if GetApplicationCommandName(a) != GetApplicationCommandName(b) {
		return false
	}

	return a.Description == b.Description && a.Type == b.Type && AreApplicationCommandOptionsEqual(a.Options, b.Options)
}

// Creates a slash command. This was made in order to avoid the unnecessary declaration
// of the `ApplicationCommand.Type` as it will always equal to `constants.APPLICATION_COMMAND_TYPE_CHAT_INPUT`
// when the application command is an slash command.
func CreateSlashCommand(name, description string, options []ApplicationCommandOption) ApplicationCommand {
	return ApplicationCommand{
		Type:        APPLICATION_COMMAND_TYPE_CHAT_INPUT,
		Name:        name,
		Description: description,
		Options:     options,
	}
}

// Creates an UI application command for users.
func CreateUserApplicationCommand(name string) ApplicationCommand {
	return ApplicationCommand{
		Type: APPLICATION_COMMAND_TYPE_USER,
		Name: name,
	}
}
